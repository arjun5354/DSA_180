class Solution {
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int n=weights.size();
        int start=0,end=0,mid,ans;
        for(int i=0;i<n;i++){
            start=max(start,weights[i]);
            end+=weights[i];
        }
        while(start<=end){
            mid=start+(end-start)/2;
            int Capacity=0,count=1;
            for(int i=0;i<n;i++){
                Capacity+=weights[i];
                if(Capacity>mid){
                    Capacity=weights[i];
                    count++;
                }
            }
            if(count<=days){
                ans=mid;
                end=mid-1;
            }
            else start=mid+1;
        }
        return ans;
    }
};

// GFG Solution
 int leastWeightCapacity(int arr[], int N, int D) {
        int start=0,end=0,mid,ans;
        for(int i=0;i<N;i++){
            end+=arr[i];
            start=max(start,arr[i]);
        }
        while(start<=end){
            mid=start+(end-start)/2;
            int Capacity=0,count=1;
            for(int i=0;i<N;i++){
                Capacity+=arr[i];
                if(Capacity>mid){
                    Capacity=arr[i];
                    count++;
                }
            }
            if(count<=D){
                ans=mid;
                end=mid-1;
            }
            else start=mid+1;
        }
        return ans;
    }
