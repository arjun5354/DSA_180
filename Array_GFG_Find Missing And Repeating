
// Two pointer approach
	int count(int arr[], int n, int x) { // O(N)
	    int s=0;
	    int e=n-1;
	    int occu=0;
	    while(s<=e){
	        if(arr[s]==x && arr[e]==x){
	            occu=e-s+1;
	            break;
	        }
	        else if(arr[s]<x) s++;
	        else if(arr[e]>x){
	            e--;
	        }
	    }
	    return occu;
	}

// O(logn)->binary Search

int findfirstOccu(int arr[],int n,int x){
		    int s=0;
		    int e=n-1;
		    int mid;
		    int fastOccuIdx=-1;
		    while(s<=e){
		        mid=s+(e-s)/2;
		        if(arr[mid]==x){
		            fastOccuIdx=mid;
		            e=mid-1;
		        }
		        else if(arr[mid]<x)s=mid+1;
		        else e=mid-1;
		    }
		    return fastOccuIdx;
		}
		int findlastOccu(int arr[],int n,int x){
		    int s=0;
		    int e=n-1;
		    int mid;
		    int lastOccuIdx=-1;
		    while(s<=e){
		        mid=s+(e-s)/2;
		        if(arr[mid]==x){
		            lastOccuIdx=mid;
		            s=mid+1;
		        }
		        else if(arr[mid]<x)s=mid+1;
		        else e=mid-1;
		    }
		    return lastOccuIdx;
		}
	int count(int arr[], int n, int x) {
	    int first_occu=findfirstOccu(arr,n,x);
	    int last_occu=findlastOccu(arr,n,x);
	    if(first_occu==-1 && last_occu==-1) return 0;
	    return last_occu-first_occu+1;
