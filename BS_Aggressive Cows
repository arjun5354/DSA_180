 // bool isPossibleSolution(vector<int> &stalls,int k,int mid){
    //     int c=1;
    //     int pos = stalls[0];
    //     for(int i=1;i<stalls.size();i++){
    //         if(stalls[i]-pos>=mid){
    //             c++;
    //             pos=stalls[i];
    //         }
            
    //     if(c==k) return true;
    //     }
    //     return false;
    // }
    int solve(int n, int k, vector<int> &stalls) {
        // sort(stalls.begin(),stalls.end());
        // int s=0;
        // int e=stalls[stalls.size()-1]-stalls[0];
        // int ans=-1;
        // while(s<=e){
        //     int mid=s+(e-s)/2;
        //     if(isPossibleSolution(stalls,k,mid)){
        //         ans=mid;
        //         s=mid+1;
        //     }
        //     else e=mid-1;
        // }
        // return ans;
        // Approach-2
        int start=1,end=0,mid,ans;
        sort(stalls.begin(),stalls.end());  
        end=stalls[n-1]-stalls[0];
        while(start<=end){
            mid=start+(end-start)/2;
            int count=1;
            int position=stalls[0];
            for(int i=1;i<n;i++){
                if(stalls[i]>=position+mid){
                    count++;
                    position=stalls[i];
                }
            }
            if(count>=k){
                ans=mid;
                start=mid+1;
            }
            else end=mid-1;
        }
        return ans;
