//   bool isPossibleSolution(int arr[],int n , int k,long long sol){
//       int c=1;
//       long long timesum=0;
//       for(int i=0;i<n;i++){
//           if(arr[i]>sol) return false;
//           if(arr[i]+timesum>sol){
//               c++;
//               timesum=arr[i];
//               if(c>k) return false;
//           }
//           else timesum+=arr[i];
//       }
//       return true;
//   }
    long long minTime(int arr[], int n, int k)
    {
    //  long long s=0;
    //  long long ans=-1;
    // // long long e=accumulate(arr,arr+n,0); - >If we use  It then the last test case are getting stuck
    //  long long e=0;
    //  for(int i=0;i<n;i++){
    //      e+=arr[i]; 
    //      }
    // while(s<=e){
    //     long long mid=s+(e-s)/2;
    //     if(isPossibleSolution(arr,n,k,mid)){
    //         ans=mid;
    //         e=mid-1;
    //     }
    //     else s=mid+1;
    // }
    // return ans;
         
         // Approach-2
         long long start=0,end=0,mid,ans;
         for(int i=0;i<n;i++){
             if(start<arr[i]){
              start=arr[i];   
             }
             end+=arr[i];
         }
         while(start<=end){
             mid=start+(end-start)/2;
             long long Painters=0,count=1;
             for(int i=0;i<n;i++){
                 Painters+=arr[i];
                 if(Painters>mid){
                     Painters=arr[i];
                     count++;
                 }
             }
             if(count<=k){
                 ans=mid;
                 end=mid-1;
             }
             else start=mid+1;
         }
         return ans;
    }
