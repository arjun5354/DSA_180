// Approach-1
class Solution {
public:
    int strStr(string haystack, string needle) { // Tc.O(mn),Sc.O(n)
    int n=haystack.size(),m=needle.size();
    for(int i=0;i<n;i++){
        int first=i,second=0;
        while(second<m){
            if(haystack[first]!=needle[second]) break;
            else{
                first++,second++;
            }
        }
        if(second==m) return first-second;
    }
    return -1;
        
    }
};
// Approach-2
class Solution {
public:
	void findlps(vector<int>&lps,string s) {
	   int pref=0,suf=1;
	   while(suf<s.size()){
	       // character matched
	       if(s[pref]==s[suf]){
	           lps[suf]=pref+1;
	           suf++;
	           pref++;
	       }
	       // Did't matched
	       else{
	           if(pref==0){
	               lps[suf++]=0;
	           }
	           else{
	               pref=lps[pref-1];
	           }
	       }
	   }
	}
    int strStr(string haystack, string needle) { // Tc.O(n),Sc.O(n)
        vector<int>lps(needle.size(),0);
        findlps(lps,needle);
        int first=0,second=0;
        while(first<haystack.size()&&second<needle.size()){
            if(haystack[first]==needle[second]){
                first++,second++;
            }
            else{
                if(second==0) first++;
                else second=lps[second-1];
            }
        }
        if(second==needle.size()) return first-second;
        else return -1;
    }
};
