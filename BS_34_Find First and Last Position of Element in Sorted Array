class Solution {
public:
   int firstOccur(vector<int>& nums, int target){
       int fastOccurIdx=-1;
       int s=0;
       int e=nums.size()-1;
       int mid = s+(e-s)/2; // Most Optimal Approach->Tc->O(logn),Sc->O(1)
       while(s<=e){
           if(nums[mid]==target) {
               fastOccurIdx=mid;
               e=mid-1;
           }
           else if(nums[mid]<target){
               s=mid+1;
           }
           else e=mid-1;
           mid=s+(e-s)/2;
       }
    return fastOccurIdx;
   }
 int lastOccur(vector<int>& nums, int target){
       int lastOccurIdx=-1;
       int s=0;
       int e=nums.size()-1;
       int mid = s+(e-s)/2;
       while(s<=e){
           if(nums[mid]==target){
              lastOccurIdx=mid;
              s=mid+1; 
           }
           else if(nums[mid]<target) s=mid+1;
           else e=mid-1;
           mid=s+(e-s)/2;
       }
       return lastOccurIdx;
   }
    vector<int> searchRange(vector<int>& nums, int target) {
        return {firstOccur(nums,target),lastOccur(nums,target)};
    }
};
/*
 vector<int> find(int arr[], int n , int x )
    {
        vector<int>ans(2);
        int s=0;
        int e=n-1;
        int first=-1;
        int last=-1;
        int mid=s+(e-s)/2;
        while(s<=e){
            if(arr[mid]==x){
                first=mid;
                e=mid-1;
            }
            else if(arr[mid]<x){
                s=mid+1;
            }
            else e=mid-1;
            mid=s+(e-s)/2;
        }
        s=0,e=n-1,mid=s+(e-s)/2;
        while(s<=e){
            if(arr[mid]==x){
                last=mid;
                s=mid+1;
            }
            else if(arr[mid]<x){
                s=mid+1;
            }
            else e=mid-1;
            mid=s+(e-s)/2;
        }
        ans[0]=first;
        ans[1]=last;
        return ans;
    }
*/
